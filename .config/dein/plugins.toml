[[plugins]]
repo = 'Shougo/dein.vim'

#########################
# 全般
#########################
# [[plugins]]
# repo = 'yuttie/comfortable-motion.vim'

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'

[[plugins]] # Denite source
repo = 'chemzqm/denite-extra'
depends = 'denite.nvim'

[[plugins]]
repo = 'Shougo/neomru.vim'
depends = 'denite.nvim'
on_path = '.*'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo='Shougo/defx.nvim'
hook_add = '''
nnoremap <silent><C-E> :Defx -toggle -split=vertical -winwidth=40 .<CR>

autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
    " Define mappings
    nnoremap <silent><buffer><expr> <CR>
                \ defx#do_action('open')
    nnoremap <silent><buffer><expr> c
                \ defx#do_action('copy')
    nnoremap <silent><buffer><expr> m
                \ defx#do_action('move')
    nnoremap <silent><buffer><expr> p
                \ defx#do_action('paste')
    nnoremap <silent><buffer><expr> l
                \ defx#do_action('open')
    nnoremap <silent><buffer><expr> E
                \ defx#do_action('open', 'vsplit')
    nnoremap <silent><buffer><expr> P
                \ defx#do_action('open', 'pedit')
    nnoremap <silent><buffer><expr> o
                \ defx#do_action('open_or_close_tree')
    nnoremap <silent><buffer><expr> K
                \ defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> N
                \ defx#do_action('new_file')
    nnoremap <silent><buffer><expr> M
                \ defx#do_action('new_multiple_files')
    nnoremap <silent><buffer><expr> C
                \ defx#do_action('toggle_columns',
                \                'mark:indent:icon:filename:type:size:time')
    nnoremap <silent><buffer><expr> S
                \ defx#do_action('toggle_sort', 'time')
    nnoremap <silent><buffer><expr> d
                \ defx#do_action('remove')
    nnoremap <silent><buffer><expr> r
                \ defx#do_action('rename')
    nnoremap <silent><buffer><expr> !
                \ defx#do_action('execute_command')
    nnoremap <silent><buffer><expr> x
                \ defx#do_action('execute_system')
    nnoremap <silent><buffer><expr> yy
                \ defx#do_action('yank_path')
    nnoremap <silent><buffer><expr> .
                \ defx#do_action('toggle_ignored_files')
    nnoremap <silent><buffer><expr> ;
                \ defx#do_action('repeat')
    nnoremap <silent><buffer><expr> h
                \ defx#do_action('cd', ['..'])
    nnoremap <silent><buffer><expr> ~
                \ defx#do_action('cd')
    nnoremap <silent><buffer><expr> q
                \ defx#do_action('quit')
    nnoremap <silent><buffer><expr> <Space>
                \ defx#do_action('toggle_select') . 'j'
    nnoremap <silent><buffer><expr> *
                \ defx#do_action('toggle_select_all')
    nnoremap <silent><buffer><expr> j
                \ line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><expr> k
                \ line('.') == 1 ? 'G' : 'k'
    nnoremap <silent><buffer><expr> <C-l>
                \ defx#do_action('redraw')
    nnoremap <silent><buffer><expr> <C-g>
                \ defx#do_action('print')
    nnoremap <silent><buffer><expr> cd
                \ defx#do_action('change_vim_cwd')
endfunction
'''

[[plugins]]
repo='Shougo/vimproc'
build='make'

[[plugins]]
repo='Shougo/vimshell.vim'
hook_add='''
  nnoremap <silent> <C-t> :VimShellPop<CR>
'''

[[plugins]]
repo='Shougo/unite.vim'
hook_add='''
  " 挿入モードで開始する
  let g:unite_enable_start_insert=1

  " 大文字小文字を区別しない
  let g:unite_enable_ignore_case = 1
  let g:unite_enable_smart_case = 1

  " ESCキーを2回押すと終了する
  au FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
  au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>
'''
[[plugins]]
repo='davidoc/taskpaper.vim'

[[plugins]]
repo='tpope/vim-surround'
on_i = 1

[[plugins]]
repo='tpope/vim-rails'

[[plugins]]
repo='tpope/vim-abolish'

[[plugins]]
repo='tpope/vim-dispatch'
hook_add = '''
  autocmd FileType ruby nnoremap <F9> :Dispatch! !ripper-tags -R --exclude=vendor<CR>
'''

[[plugins]]
repo='nelstrom/vim-qargs'

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo='Shougo/junkfile.vim'
hook_add='''
let g:junkfile#directory = '~/.junkfile'
" Open junk file."{{{
command! -nargs=0 JunkFile call s:open_junk_file()
function! s:open_junk_file()
  let l:junk_dir = $HOME . '/.junkfile'. strftime('/%Y/%m')
  if !isdirectory(l:junk_dir)
    call mkdir(l:junk_dir, 'p')
  endif

  let l:filename = input('Junk Code: ', l:junk_dir.strftime('/%Y-%m-%d-%H%M%S.'))
  if l:filename != ''
    execute 'edit ' . l:filename
  endif
endfunction"}}}
'''
[[plugins]]
repo = 'nazo/pt.vim'

[[plugins]]
repo = 'mileszs/ack.vim'

[[plugins]]
repo = 'thinca/vim-qfreplace'
on_ft = ['qf']
hook_source = '''
 autocmd MyAutoCmd FileType qf nnoremap <buffer> r :<C-u>Qfreplace<CR>
'''
[[plugins]]
repo = 'junegunn/fzf'
merged = 0

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add='''
nmap <space>e :<C-u>Files<CR>
" <C-]>でタグ検索
nnoremap <silent> <C-]> :call fzf#vim#tags(expand('<cword>'))<CR>

" fzfからファイルにジャンプできるようにする
let g:fzf_buffers_jump = 1
'''

[[plugins]]
repo = 'nixprime/cpsm'
build = 'env PY3=ON ./install.sh'

[[plugins]]
repo = 'szw/vim-tags'
hook_add = '''
au BufNewfile,BufRead *.rb let g:vim_tags_project_tags_command = "ripper-tags -R 2>/dev/null &"
'''

[[plugins]]
repo='easymotion/vim-easymotion'
hook_add='''
" s{char}{char} to move to {char}{char}
nmap z <Plug>(easymotion-overwin-f2)

" Move to line
map <Space>L <Plug>(easymotion-bd-jk)
nmap <Space>L <Plug>(easymotion-overwin-line)

" Move to word
map  <Space>w <Plug>(easymotion-bd-w)
nmap <Space>w <Plug>(easymotion-overwin-w)
'''

[[plugins]]
repo='haya14busa/vim-asterisk'
hook_add = '''
map *  <Plug>(asterisk-z*)
map #  <Plug>(asterisk-z#)
map g* <Plug>(asterisk-gz*)
map g# <Plug>(asterisk-gz#)
'''

# [[plugins]]
# repo='w0rp/ale'
# hook_add='''
#   let g:ale_sign_column_always = 1
#   let g:lightline = {
#     \'active': {
#     \  'left': [
#     \    ['mode', 'paste'],
#     \    ['readonly', 'filename', 'modified', 'ale'],
#     \  ]
#     \},
#     \'component_function': {
#     \  'ale': 'ALEGetStatusLine'
#     \}
#   \ }
# '''

#[[plugins]]
#repo='jpo/vim-railscasts-theme'
#hook_add = '''
#  set background=dark
#  " colorscheme
#  au MyAutoCmd VimEnter * nested colorscheme railscasts
#'''
# [[plugins]]
# repo='yasukotelin/shirotelin'
# hook_add = '''
#   " colorscheme
#   au MyAutoCmd VimEnter * nested colorscheme shirotelin
#   set cursorcolumn
#   set list
#   set listchars=tab:»-,eol:↲,extends:»,precedes:«,space:.
#   set background=light
# '''

[[plugins]]
repo='rakr/vim-one'
hook_add = '''
  if (empty($TMUX))
    if (has("nvim"))
    "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
    endif
    "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
    "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
    " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
    if (has("termguicolors"))
      set termguicolors
    endif
  endif
  set background=dark
  let g:one_allow_italics = 1
  let g:airline_theme='one'
  " colorscheme
  au MyAutoCmd VimEnter * nested colorscheme one
'''

[[plugins]]
repo='nathanaelkane/vim-indent-guides'
hook_add = '''
  "let g:indent_guides_auto_colors=0
  "autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd   ctermbg=52
  "autocmd VimEnter,Colorscheme * :hi IndentGuidesEven  ctermbg=94
  let g:indent_guides_enable_on_vim_startup=1
  let g:indent_guides_guide_size=1
'''

#[[plugins]]
#repo='osyo-manga/vim-over'

#[[plugins]]
#repo='vim-syntastic/syntastic'
#hook_add = '''
#  let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': ['rust'] }
#  let g:syntastic_rust_checkers = ['rustc', 'cargo']
#'''

#########################
# ステータスライン
#########################
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = {
        \ 'colorscheme': 'wombat',
        \ 'mode_map': {'c': 'NORMAL'},
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
        \ },
        \ 'component_function': {
        \   'modified': 'LightlineModified',
        \   'readonly': 'LightlineReadonly',
        \   'fugitive': 'LightlineFugitive',
        \   'filename': 'LightlineFilename',
        \   'fileformat': 'LightlineFileformat',
        \   'filetype': 'LightlineFiletype',
        \   'fileencoding': 'LightlineFileencoding',
        \   'mode': 'LightlineMode'
        \ }
        \ }

    function! LightlineModified()
      return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
    endfunction

    function! LightlineReadonly()
      return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
    endfunction

    function! LightlineFilename()
      return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
            \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
            \  &ft == 'unite' ? unite#get_status_string() :
            \  &ft == 'vimshell' ? vimshell#get_status_string() :
            \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
            \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
    endfunction

    function! LightlineFugitive()
      if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
        return fugitive#head()
      else
        return ''
      endif
    endfunction

    function! LightlineFileformat()
      return winwidth(0) > 70 ? &fileformat : ''
    endfunction

    function! LightlineFiletype()
      return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
    endfunction

    function! LightlineFileencoding()
      return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
    endfunction

    function! LightlineMode()
      return winwidth(0) > 60 ? lightline#mode() : ''
    endfunction
'''

#########################
# Git
#########################
[[plugins]]
repo = 'tpope/vim-fugitive'

#########################
# Lang
#########################

[[plugins]] # Ruby
repo  = 'Shougo/deoplete-rct'
depends = 'deoplete'

[[plugins]] # Ruby
repo  = 'tpope/vim-endwise'
on_ft = ['ruby']
on_i = 1
hook_add = '''
  let g:endwise_no_mappings=1
'''

[[plugins]] # Ruby
repo = 'osyo-manga/vim-monster'
on_ft = ['ruby']
hook_add = '''
  " let g:monster#completion#rcodetools#backend = "async_rct_complete"
  let g:monster#completion#rcodetools#backend = "async_solargraph_suggest"
  let g:deoplete#sources#omni#input_patterns = {
  \   "ruby" : '[^. *\t]\.\w*\|\h\w*::',
  \}
'''

# [[plugins]] # Rust
# repo  = 'racer-rust/vim-racer'

[[plugins]] # Rust
repo  = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_add = '''
  let g:rustfmt_autosave = 1
  let g:rustfmt_command = '$HOME/.cargo/bin/rustfmt'
'''

[[plugins]] # JavaScript
repo  = 'kchmck/vim-coffee-script'

[[plugins]] # JavaScript
repo  = 'vim-scripts/jQuery'

[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['javascript', 'javascript.jsx']

[[plugins]]
repo = 'maxmellon/vim-jsx-pretty'
on_ft = ['javascript', 'javascript.jsx']

[[plugins]]
repo = 'alampros/vim-styled-jsx'
on_ft = ['javascript', 'javascript.jsx']

[[plugins]]
repo = 'moll/vim-node'
on_ft = ['javascript']

[[plugins]] # Haml
repo  = 'tpope/vim-haml'
on_ft = 'haml'

[[plugins]] # Html5
repo  = 'othree/html5.vim'
on_ft = ['html', 'eruby', 'erb']
hook_add = '''
  let g:html5_event_handler_attributes_complete = 1
  let g:html5_rdfa_attributes_complete = 1
  let g:html5_microdata_attributes_complete = 1
  let g:html5_aria_attributes_complete = 1
'''

[[plugins]] # Html5
repo  = 'alvan/vim-closetag'
on_ft = ['html', 'xhtml', 'eruby', 'erb']

[[plugins]] # Toml
repo  = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] # Markdown
repo = 'godlygeek/tabular'
on_ft = ['markdown','mkd', 'md']
[[plugins]] # Markdown
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown','mkd', 'md']
hook_add = '''
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_no_default_key_mappings = 1
let g:vim_markdown_auto_insert_bullets = 0
let g:vim_markdown_new_list_item_indent = 0
let g:vim_markdown_conceal = 0
'''
# quote内のプログラムをシンタックスハイライトする
[[plugins]]
repo = 'joker1007/vim-markdown-quote-syntax'
on_ft = ['markdown','mkd','md']

[[plugins]] # golang
repo = 'fatih/vim-go'
on_ft = ['go']

[[plugins]] # graphql
repo = 'jparise/vim-graphql'
hook_add = '''
au BufNewFile,BufRead *.prisma setfiletype graphql
'''
